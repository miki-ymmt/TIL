## 従来のDOM

直接DOMを操作していて、レンダリングコストが高い。コードの複雑さがあった。

素のJS、 JQuerly



## 仮想DOM

JSのオブジェクトで仮想的に作られたDOM

いきなりDOMを操作せず、JS上で仮想DOMを操作し差分を出してからDOMに反映する


元のJS

- 一つのファイルに書いていた


## 改善されたJS

- ほかのJSファイルを読み込んで使っていた

- コードの再利用、共通化はできるが、読み込み順を意識しないとエラーになる（依存関係）



## 現在のモダンJS

- npm/yarnなどのパッケージマネージャーを使用

- 内部ではNode.jsが動いている

- import先が明示的にわかる

- 依存関係を勝手に解決してくれる

- チーム内での共有も簡単に

- 世界中で公開されているパッケージをコマンド一つで利用可能

## npm/yarnの基本

NPM:パッケージのレジストリ

npm,yarnコマンドを使ってmoduleをインストールする

↓

package.json:設計書的な役割

どの情報でインストールされたか？

↓

package-lock.json またはyarn.lock :　自動で生成される。依存関係、バージョンの解決

↓

node_modules: 各モジュールの実態、jsファイルなど、サイズが膨大なのでGithubにはあげない


## ECMAScript　エクマスクリプト

- JSの標準規格

- 毎年一回更新

- ES5 = ES2014, ES6 = ES2015　　ややこしいが最近は西暦で呼ぶようになっている

- ES2015でかなり追加された

## モジュールバンドラーとは？

webpackやViteなど。



複数のjs（css/image）ファイルを一つにまとめるためのもの

依存関係含めて判定していい感じにまとめてくれる


## トランスパイラとは？

BABEL

SWC  今後主流になる？


新しいものが出ても、対応してないブラウザがいっぱいある、、、、（IEとか）

解決すべく！！

新しいJSの記法を古い記法に変換してくれる

- 開発を新しい記法でやって、実行するときに古い記法に変換される

## SPAとは？

Single Page Application


- モダンJSはSPAが基本

- HTMLは一つのみでJSで画面を書き換える

## メリット

- ページ遷移のチラツキがなくなる

- 表示速度のアップによるユーザー体験向上

- コンポーネント分割が容易になることで開発効率がアップ
- React開発ではほぼconstを使う。

- バッククゥオートを使うとテンプレート文字列が使える
const message2 = `私の名前は${name}です。年齢は${age}です。`;

- アロー関数では、関数の本体が単一の式だけで構成される場合、returnキーワードと波括弧 {} を省略することができます。その場合、その式の評価結果が自動的に戻り値となります。
- {}で囲む場合はreturnが必要なので、省略に慣れた時には特に注意！

- const func3 = (num1 + num2) => {
    return num1 + num2;
};


